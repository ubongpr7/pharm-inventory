# Generated by Django 5.1.7 on 2025-03-26 11:42

import django.core.validators
import django.db.models.deletion
import mainapps.common.custom_fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('company', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('structural', models.BooleanField(default=False, help_text='Parts may not be directly assigned to a structural category, but may be assigned to child categories.', verbose_name='Structural')),
                ('name', models.CharField(help_text='It must be unique', max_length=200, unique=True, verbose_name='Category name*')),
                ('slug', models.SlugField(editable=False, max_length=230)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_for_update', models.BooleanField(default=False)),
                ('bom_cost_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Minimum cost of component parts', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum BOM Cost')),
                ('bom_cost_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Maximum cost of component parts', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum BOM Cost')),
                ('purchase_cost_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Minimum historical purchase cost', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Purchase Cost')),
                ('purchase_cost_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Maximum historical purchase cost', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Purchase Cost')),
                ('internal_cost_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Minimum cost based on internal price breaks', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Internal Price')),
                ('internal_cost_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Maximum cost based on internal price breaks', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Internal Price')),
                ('supplier_price_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Minimum price of part from external suppliers', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Supplier Price')),
                ('supplier_price_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Maximum price of part from external suppliers', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Supplier Price')),
                ('variant_cost_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Calculated minimum cost of variant parts', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Variant Cost')),
                ('variant_cost_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Calculated maximum cost of variant parts', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Variant Cost')),
                ('override_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Override minimum cost', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Cost')),
                ('override_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Override maximum cost', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Cost')),
                ('overall_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Calculated overall minimum cost', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Cost')),
                ('overall_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Calculated overall maximum cost', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Cost')),
                ('sale_price_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Minimum sale price based on price breaks', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Sale Price')),
                ('sale_price_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Maximum sale price based on price breaks', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Sale Price')),
                ('sale_history_min', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Minimum historical sale price', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Sale Cost')),
                ('sale_history_max', mainapps.common.custom_fields.MoneyField(blank=True, decimal_places=2, default=0.0, help_text='Maximum historical sale price', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum Sale Cost')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum_stock_level', models.IntegerField(default=0, help_text='Trigger point for low stock alerts (units)', verbose_name='Minimum Stock Level')),
                ('re_order_point', models.IntegerField(default=10, help_text='Inventory level triggering replenishment (units)', verbose_name='Reorder Point')),
                ('re_order_quantity', models.IntegerField(default=200, help_text='Standard quantity for automated replenishment', verbose_name='Reorder Quantity')),
                ('automate_reorder', models.BooleanField(default=False, help_text='Enable automatic purchase orders at reorder point', verbose_name='Auto-Replenish')),
                ('safety_stock_level', models.IntegerField(default=0, help_text='Buffer stock for demand/supply fluctuations', verbose_name='Safety Stock')),
                ('supplier_lead_time', models.IntegerField(default=0, help_text='Average replenishment duration (days)', verbose_name='Supplier Lead Time')),
                ('internal_processing_time', models.IntegerField(default=1, help_text='Days needed for internal order processing', verbose_name='Internal Processing Time')),
                ('reorder_strategy', models.CharField(choices=[('FQ', 'Fixed Quantity'), ('FI', 'Fixed Interval'), ('DY', 'Demand-Based')], default='FQ', help_text='Methodology for inventory replenishment', max_length=2, verbose_name='Replenishment Strategy')),
                ('expiration_threshold', models.IntegerField(default=30, help_text='Days before expiry to trigger alerts', verbose_name='Expiration Alert Window')),
                ('batch_tracking_enabled', models.BooleanField(default=False, help_text='Enable batch/lot number tracking for items', verbose_name='Batch Tracking')),
                ('holding_cost_per_unit', models.DecimalField(decimal_places=2, default=0.0, help_text='Annual storage cost per unit', max_digits=10, verbose_name='Holding Cost')),
                ('ordering_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Fixed cost per replenishment order', max_digits=10, verbose_name='Ordering Cost')),
                ('stockout_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Estimated cost per unit of stockout', max_digits=10, verbose_name='Stockout Cost')),
                ('expiration_policy', models.CharField(choices=[('0', 'Dispose of Stock'), ('1', 'Return to Manufacturer')], default='0', help_text='Procedure for expired inventory items', max_length=200, verbose_name='Expiration Handling')),
                ('recall_policy', models.CharField(choices=[('0', 'Remove from Stock'), ('1', 'Notify Customers'), ('3', 'Replace Item'), ('4', 'Destroy Item'), ('5', 'Repair Item')], default='0', help_text='Protocol for product recall scenarios', max_length=200, verbose_name='Recall Procedure')),
                ('near_expiry_policy', models.CharField(choices=[('DISCOUNT', 'Sell at Discount'), ('DONATE', 'Donate to Charity'), ('DESTROY', 'Destroy Immediately'), ('RETURN', 'Return to Supplier')], default='DISCOUNT', help_text='Action plan for items nearing expiration', max_length=20, verbose_name='Near-Expiry Action')),
                ('forecast_method', models.CharField(choices=[('SA', 'Simple Average'), ('MA', 'Moving Average'), ('ES', 'Exponential Smoothing')], default='SA', help_text='Algorithm for demand prediction', max_length=2, verbose_name='Forecast Method')),
                ('supplier_reliability_score', models.DecimalField(decimal_places=2, default=100.0, help_text='Performance rating (0-100 scale)', max_digits=5, verbose_name='Supplier Score')),
                ('alert_threshold', models.IntegerField(default=10, help_text='Percentage variance to trigger stock alerts', verbose_name='Alert Threshold')),
                ('external_system_id', models.CharField(blank=True, help_text='Identifier in external ERP/WMS systems', max_length=200, null=True, verbose_name='External ID')),
                ('assembly', models.BooleanField(default=False, help_text='Can this Inventory be built from other Inventory?', verbose_name='Assembly')),
                ('component', models.BooleanField(default=False, help_text='Can this Inventory be used to build other Inventory?', verbose_name='Component')),
                ('trackable', models.BooleanField(default=True, help_text='Does this Inventory have tracking for unique items?', verbose_name='Trackable')),
                ('testable', models.BooleanField(default=False, help_text='Can this Inventory have test results recorded against it?', verbose_name='Testable')),
                ('purchaseable', models.BooleanField(default=True, help_text='Can this Inventory be purchased from external suppliers?', verbose_name='Purchaseable')),
                ('salable', models.BooleanField(default=True, help_text='Can this Inventory be sold to customers?', verbose_name='Salable')),
                ('active', models.BooleanField(default=True, help_text='Is this Inventory active?', verbose_name='Active')),
                ('locked', models.BooleanField(default=False, help_text='Locked Inventory cannot be edited', verbose_name='Locked')),
                ('virtual', models.BooleanField(default=False, help_text='Is this a virtual inventory, such as a software product or license?', verbose_name='Virtual')),
                ('name', models.CharField(help_text='Unique identifier for this inventory system', max_length=255, verbose_name='Inventory Name')),
                ('description', models.TextField(blank=True, help_text='Detailed operational context and usage notes', null=True, verbose_name='Description')),
                ('IPN', models.CharField(blank=True, help_text='Internal Part Number', max_length=100, null=True, verbose_name='IPN')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('default_supplier', models.ForeignKey(blank=True, help_text='Default supplier For the Inventory', limit_choices_to={'is_supplier': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_inventories', to='company.company', verbose_name='Default Supplier')),
                ('inventory_type', models.ForeignKey(help_text='Classification based on operational purpose', limit_choices_to={'which_model': 'inventory'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.typeof', verbose_name='Inventory Type')),
                ('officer_in_charge', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventories_incharge', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'ordering': ['-created_at'],
            },
        ),
    ]
